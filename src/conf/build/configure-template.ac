# 'configure-template.ac' is the source file in charge of dealing
# with the Autoconf/Automake macros to be found in the generated
# 'configure.ac'. One can use the 'checkConfigure.sh' script to check
# whether the corresponding 'configure.ac' is the appropriate result.

# This is a way of customizing settings prior to the whole 'autogen.sh' process,
# leading to have the build system generated. 


AC_PREREQ(2.61)


# Declaration section for the Autotools macros.


AC_INIT([ST_PROJECT_NAME],[ST_VERSION],[ST_MAILING_LIST_BUGTRACKING])

AC_CONFIG_SRCDIR([ST_CONFIG_HEADER.in])
AC_CONFIG_AUX_DIR([src/conf/build])

# Detects the canonical host and target build environment:
AC_CANONICAL_TARGET

# 'tar-ustar' selects the ustar format defined by POSIX 1003.1-1988. 
# This format is believed to be old enough to be portable, and allows
# for paths longer than 99 characters:
AM_INIT_AUTOMAKE([tar-ustar])

# OSDLTemporaryConfig.h is the first basic config file to be generated,
# it contains what classically is in an usual config.h.
# It is then transformed by AX_PREFIX_CONFIG_H into OSDLConfig.h, whose
# defines are prefixed and have include guards.
# Finally AC_CONFIG_COMMANDS updates OSDLConfig.h so that symbols
# such as OSDL_HAVE_CTIME are replaced by OSDL_USES_CTIME.

# This macro adds '-DHAVE_CONFIG_H' in DEFS for compiler, but OSDL
# ignores this too common (hence risky) symbol, and uses 
# OSDL_USES_CONFIG_H instead.
AC_CONFIG_HEADERS([ST_CONFIG_HEADER],[],[])
OSDL_CPPFLAGS="-DOSDL_USES_CONFIG_H $OSDL_CPPFLAGS"


# OSDLConfig.h will be the only config header to be installed.
# It is obtained from ST_CONFIG_HEADER by renaming all entries that may 
# clash when included by some user code.
# Ex: HAVE_CTIME is ultimately renamed to OSDL_USES_CTIME
AX_PREFIX_CONFIG_H([src/code/OSDLConfig.h])

# How to use it remains unclear: #AC_CONFIG_HEADERS([ST_CONFIG_HEADER:src/conf/build/OSDLConfig-header.in:src/conf/build/OSDLConfig-footer.in])



# Naming section.

PROJECT_NAME=ST_PROJECT_NAME
AC_SUBST(PROJECT_NAME)

UNIX_PROJECT_NAME=ST_UNIX_PROJECT_NAME
AC_SUBST(UNIX_PROJECT_NAME)



# OSDL version numbers for current release.


# Actual release date.

OSDL_RELEASE_DATE=ST_DATE_OF_RELEASE
AC_SUBST(OSDL_RELEASE_DATE)


# Usual versioning. 


OSDL_MAJOR_VERSION=ST_MAJOR_VERSION
AC_SUBST(OSDL_MAJOR_VERSION)

OSDL_MINOR_VERSION=ST_MINOR_VERSION
AC_SUBST(OSDL_MINOR_VERSION)

OSDL_RELEASE=ST_RELEASE
AC_SUBST(OSDL_RELEASE)


OSDL_VERSION=ST_VERSION
AC_SUBST(OSDL_VERSION)

OSDL_FULL_VERSION=ST_FULL_VERSION
AC_SUBST(OSDL_FULL_VERSION)



# Libtool-style versioning.

OSDL_MAJOR_ANCESTOR=ST_MAJOR_ANCESTOR
AC_SUBST(OSDL_MAJOR_ANCESTOR)

# From previous variables Libtool version can be deduced:

OSDL_LT_RELEASE=$OSDL_VERSION
AC_SUBST(OSDL_LT_RELEASE)


OSDL_LT_CURRENT=$OSDL_MAJOR_VERSION
AC_SUBST(OSDL_LT_CURRENT)

OSDL_LT_REVISION=$OSDL_MINOR_VERSION
AC_SUBST(OSDL_LT_REVISION)

OSDL_LT_AGE=`expr $OSDL_MAJOR_VERSION - $OSDL_MAJOR_ANCESTOR`
AC_SUBST(OSDL_LT_AGE)


OSDL_LIBTOOL_VERSION="$OSDL_LT_CURRENT.$OSDL_LT_REVISION.$OSDL_LT_AGE"
# The OSDL_LIBTOOL_VERSION symbol is used to update
# basic/OSDLHeaderVersion.h.in with the actual OSDL libtool version, 
# so that this header-embedded version can be compared with the library
# version (see: test/osdl.m4). 
AC_SUBST(OSDL_LIBTOOL_VERSION)


# The value must be quoted with "" since it will be an argument of a C++ 
# function call.
# See: generic/OSDLUtils.cc for the library-embedded version.
AC_DEFINE_UNQUOTED([LIBTOOL_VERSION],
	["$OSDL_LIBTOOL_VERSION"],
	[Current Libtool version for the OSDL library])


# Backward compatibility.

OSDL_OLDEST_SUPPORTED_MAJOR=ST_OLDEST_SUPPORTED_MAJOR
AC_SUBST(OSDL_OLDEST_SUPPORTED_MAJOR)

OSDL_OLDEST_SUPPORTED_MINOR=ST_OLDEST_SUPPORTED_MINOR
AC_SUBST(OSDL_OLDEST_SUPPORTED_MINOR)



# pkgconfig .pc file.
OSDL_PKGCONFIG_FILE="osdl-${OSDL_VERSION}.pc"
AC_SUBST(OSDL_PKGCONFIG_FILE)


# Archive base directory. 
OSDL_ARCHIVE_DIR="\${HOME}/Archive/${PROJECT_NAME}"
AC_SUBST(OSDL_ARCHIVE_DIR)

# Local shared directory for OSDL:
# If the user wants to redefine his prefix, then he should reconfigure the
# package: if not hardcoding the prefix at the configure step, then for
# example we could not use autoconf to generate doxygen.conf which needs
# a fully expanded output path (hence not containing '${prefix}').
OSDL_INSTALL_SHARED_DIR="\${prefix}/share/${PROJECT_NAME}"
AC_SUBST(OSDL_INSTALL_SHARED_DIR)


# Script section.

# Local root of the OSDL installed scripts:
OSDL_INSTALL_SCRIPT_DIR="${OSDL_INSTALL_SHARED_DIR}/scripts"
AC_SUBST(OSDL_INSTALL_SCRIPT_DIR)

# Install target directory for python scripts:
OSDL_INSTALL_PYTHON_DIR="${OSDL_INSTALL_SCRIPT_DIR}/python"
AC_SUBST(OSDL_INSTALL_PYTHON_DIR)

# Install target directory for shell scripts:
OSDL_INSTALL_SHELL_DIR="${OSDL_INSTALL_SCRIPT_DIR}/shell"
AC_SUBST(OSDL_INSTALL_SHELL_DIR)



# The OSDL source archive downloaded by LOANI:
OSDL_CURRENT_SOURCE_ARCHIVE="osdl-$OSDL_VERSION.tar.bz2"
AC_SUBST(OSDL_CURRENT_SOURCE_ARCHIVE)


# Documentation section.

OSDL_SF_WEB_SERVER="sourceforge.net"
AC_SUBST(OSDL_SF_WEB_SERVER)

OSDL_SF_URL="http://${UNIX_PROJECT_NAME}.${OSDL_SF_WEB_SERVER}"
AC_SUBST(OSDL_SF_URL)

OSDL_SF_VERSION_URL="${OSDL_SF_URL}/${PROJECT_NAME}-${OSDL_VERSION}"
AC_SUBST(OSDL_SF_VERSION_URL)

OSDL_DEFAULT_SF_USER="wondersye"
AC_SUBST(OSDL_DEFAULT_SF_USER)

OSDL_MIRROR_WEB_SERVER="esperide.com"
AC_SUBST(OSDL_MIRROR_WEB_SERVER)

# Used not to mix projects and versions:
OSDL_CURRENT_VERSION_PREFIX="${PROJECT_NAME}-${OSDL_VERSION}"
AC_SUBST(OSDL_CURRENT_VERSION_PREFIX)


# Local directories.
# They are gathered here since doxygen configuration file needs them also.

# Local root of the whole OSDL documentation:
# If the user wants to redefine his prefix, then he should reconfigure the
# package: if not hardcoding the prefix at the configure step, then for
# example we could not use autoconf to generate doxygen.conf which needs
# a full expanded output path (hence not containing ${prefix}).
OSDL_LOCAL_DOC_DIR="\${prefix}/share/${PROJECT_NAME}/doc"
AC_SUBST(OSDL_LOCAL_DOC_DIR)

# Local root of the whole OSDL documentation:
# (ex: PREFIX/doc/web)
OSDL_LOCAL_WEB_DIR=$OSDL_LOCAL_DOC_DIR/web
AC_SUBST(OSDL_LOCAL_WEB_DIR)

# Local root of the whole OSDL general html documentation:
# (not specific to any version; no special subdirectory used)
# (ex: PREFIX/doc/web)
OSDL_LOCAL_WEB_SHARED_DIR=$OSDL_LOCAL_WEB_DIR
AC_SUBST(OSDL_LOCAL_WEB_SHARED_DIR)


# Local root of the OSDL HTML documentation specific to this current version:
# (ex: PREFIX/doc/web/OSDL-u.v)
OSDL_LOCAL_WEB_CURRENT_VERSION_DIR=$OSDL_LOCAL_WEB_DIR/$OSDL_CURRENT_VERSION_PREFIX
AC_SUBST(OSDL_LOCAL_WEB_CURRENT_VERSION_DIR)


# Local root of the OSDL API HTML documentation specific to this current
# version:
# (ex: PREFIX/doc/web/OSDL-u.v/api)
OSDL_LOCAL_WEB_CURRENT_VERSION_API_DIR=$OSDL_LOCAL_WEB_DIR/$OSDL_CURRENT_VERSION_PREFIX/api
AC_SUBST(OSDL_LOCAL_WEB_CURRENT_VERSION_API_DIR)



# Support section.

OSDL_MAILING_LIST_SUPPORT=ST_MAILING_LIST_SUPPORT
AC_SUBST(OSDL_MAILING_LIST_SUPPORT)

OSDL_MAILING_LIST_BUGTRACKING=ST_MAILING_LIST_BUGTRACKING
AC_SUBST(OSDL_MAILING_LIST_BUGTRACKING)



# If the user did not override CXXFLAGS, provide our own default settings:
# (in all cases the clumsy "-g -O2" automake default is removed) 
CXXFLAGS=${CXXFLAGS-""}


# Checks for programs:
AC_PROG_CXX
AC_PROG_AWK
AC_PROG_CPP
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET

# Tells the libtool machinery that the package supports DLLs on Windows:
LT_INIT([dlopen win32-dll])


# Checks for header files.
AC_HEADER_DIRENT
AC_HEADER_STDC
AC_HEADER_SYS_WAIT

# Only headers independent from all OSDL features are checked here: 
# (actually nothing to test, everything has been checked by Ceylan)
#AC_CHECK_HEADERS([])


# Checks for typedefs, structures, and compiler characteristics.
AC_HEADER_STDBOOL
AC_C_CONST
AC_C_INLINE
AC_TYPE_PID_T
AC_TYPE_SIZE_T
AC_HEADER_TIME
AC_STRUCT_TM
AC_C_VOLATILE


# Checks for libraries.


# Checks for library functions.
AC_FUNC_CLOSEDIR_VOID
AC_FUNC_ERROR_AT_LINE
AC_FUNC_FORK
# No, 'malloc' was only in a comment: AC_FUNC_MALLOC
AC_FUNC_SELECT_ARGTYPES
AC_TYPE_SIGNAL
AC_FUNC_STAT
AC_FUNC_UTIME_NULL


# Only functions independent from all OSDL features are checked here. 
# (actually nothing to test, everything is provided by Ceylan)
#AC_CHECK_FUNCS([])


# LOANI section.
# (defines OSDL_LOANI_INSTALLATIONS, hence must be before prerequisites)

# LOANI_VERSION no longer defined here.

# LOANI installations default base directory.
OSDL_INSTALLATION="\${prefix}"

# Needed to avoid a '..' in the path which would result in the includes not
# being found at build time, since the installed OSDL directory does not exist
# yet:
# (if a build fails due to OSDL_LOANI_INSTALLATIONS being equal to
# NONE, check that your OSDL-environment.sh file still contains a OSDL_PREFIX
# definition)
OSDL_LOANI_INSTALLATIONS=`echo ${prefix} | sed 's|LOANI-installations/OSDL-.*$|LOANI-installations|1'`
AC_SUBST(OSDL_LOANI_INSTALLATIONS)

# Where the LOANI download cache will be put:
LOANI_REPOSITORY_DIR="${OSDL_LOANI_INSTALLATIONS}/../LOANI-repository"
AC_SUBST(LOANI_REPOSITORY_DIR)

# Where LOANI will install packages:
LOANI_INSTALL_DIR="${OSDL_LOANI_INSTALLATIONS}"
AC_SUBST(LOANI_INSTALL_DIR)

# The LOANI documentation page:
LOANI_WEB_HOMEPAGE="$OSDL_SF_VERSION_URL/LOANI.html"
AC_SUBST(LOANI_WEB_HOMEPAGE)

# The LOANI mailing-list for bug reports:
LOANI_MAILING_LIST=ST_MAILING_LIST_LOANI
AC_SUBST(LOANI_MAILING_LIST)



# Prerequisites section.

# The versions must be specified here, as they are needed to call the
# m4 configure macros (ex: AM_PATH_SDL( 1.2.11 ...)) and they are used
# to generate OSDLToolsSettings.inc.

# The order according to prerequesites are listed here is from the most
# specific to the least, as their libraries flags will respect that
# order.

# As soon as the autotools are used, the whole SDL family and its own
# prerequisites will be used: OSDL_USES_SDL and al are thus defined
# unconditionally here.



# SDL_gfx. 
# Depends on SDL, hence managed first (for the order in OSDL_LIBS).

SDL_GFX_MAJOR_VERSION="2.0"
AC_SUBST(SDL_GFX_MAJOR_VERSION)

# In the hope the configure removed options are then restored
# (otherwise switch back to 2.0.18):
#SDL_GFX_MINOR_VERSION="21"
SDL_GFX_MINOR_VERSION="18"
AC_SUBST(SDL_GFX_MINOR_VERSION)

SDL_GFX_RECOMMENDED_VERSION="$SDL_GFX_MAJOR_VERSION.$SDL_GFX_MINOR_VERSION"
AC_SUBST(SDL_GFX_RECOMMENDED_VERSION)

SDL_GFX_OLDEST_SUPPORTED_VERSION="$SDL_GFX_RECOMMENDED_VERSION"
AC_SUBST(SDL_GFX_OLDEST_SUPPORTED_VERSION)


SDL_GFX_PREFIX="${OSDL_LOANI_INSTALLATIONS}/SDL_gfx-$SDL_GFX_RECOMMENDED_VERSION"

OSDL_CPPFLAGS="$OSDL_CPPFLAGS -I$SDL_GFX_PREFIX/include/SDL"
OSDL_LIBS="$OSDL_LIBS -L$SDL_GFX_PREFIX/lib -lSDL_gfx"	

AC_DEFINE([USES_SDL_GFX],[1],[Define to 1 if OSDL is to use SDL_gfx])


	
# SDL_ttf. 
# Depends on SDL, hence managed first (for the order in OSDL_LIBS).

SDL_TTF_RECOMMENDED_VERSION="2.0.9"
AC_SUBST(SDL_TTF_RECOMMENDED_VERSION)

SDL_TTF_OLDEST_SUPPORTED_VERSION="$SDL_TTF_RECOMMENDED_VERSION"
AC_SUBST(SDL_TTF_OLDEST_SUPPORTED_VERSION)

SDL_TTF_PREFIX="${OSDL_LOANI_INSTALLATIONS}/SDL_ttf-$SDL_TTF_RECOMMENDED_VERSION"

OSDL_CPPFLAGS="$OSDL_CPPFLAGS -I$SDL_TTF_PREFIX/include/SDL"
OSDL_LIBS="$OSDL_LIBS -L$SDL_TTF_PREFIX/lib -lSDL_ttf"	
	
AC_DEFINE([USES_SDL_TTF],[1],[Define to 1 if OSDL is to use SDL_ttf])

	
	
# SDL_image. 
# Depends on SDL, hence managed first (for the order in OSDL_LIBS).

SDL_IMAGE_RECOMMENDED_VERSION="1.2.8"
AC_SUBST(SDL_IMAGE_RECOMMENDED_VERSION)

SDL_IMAGE_OLDEST_SUPPORTED_VERSION="$SDL_IMAGE_RECOMMENDED_VERSION"
AC_SUBST(SDL_IMAGE_OLDEST_SUPPORTED_VERSION)

SDL_IMAGE_PREFIX="${OSDL_LOANI_INSTALLATIONS}/SDL_image-$SDL_IMAGE_RECOMMENDED_VERSION"

OSDL_CPPFLAGS="$OSDL_CPPFLAGS -I$SDL_IMAGE_PREFIX/include/SDL"
OSDL_LIBS="$OSDL_LIBS -L$SDL_IMAGE_PREFIX/lib -lSDL_image"	
	
AC_DEFINE([USES_SDL_IMAGE],[1],[Define to 1 if OSDL is to use SDL_image])


	
# SDL_mixer. 
# Depends on SDL, hence managed first (for the order in OSDL_LIBS).

SDL_MIXER_RECOMMENDED_VERSION="1.2.10"

AC_SUBST(SDL_MIXER_RECOMMENDED_VERSION)

SDL_MIXER_OLDEST_SUPPORTED_VERSION="$SDL_MIXER_RECOMMENDED_VERSION"
AC_SUBST(SDL_MIXER_OLDEST_SUPPORTED_VERSION)

SDL_MIXER_PREFIX="${OSDL_LOANI_INSTALLATIONS}/SDL_mixer-$SDL_MIXER_RECOMMENDED_VERSION"

OSDL_CPPFLAGS="$OSDL_CPPFLAGS -I$SDL_MIXER_PREFIX/include/SDL"
OSDL_LIBS="$OSDL_LIBS -L$SDL_MIXER_PREFIX/lib -lSDL_mixer"	
	
AC_DEFINE([USES_SDL_MIXER],[1],[Define to 1 if OSDL is to use SDL_mixer])


# Agar.
# Depends on SDL, hence managed first (for the order in OSDL_LIBS).

AGAR_RECOMMENDED_VERSION="1.3.4"
AC_SUBST(AGAR_RECOMMENDED_VERSION)

AGAR_OLDEST_SUPPORTED_VERSION="$AGAR_RECOMMENDED_VERSION"
AC_SUBST(AGAR_OLDEST_SUPPORTED_VERSION)

AGAR_PREFIX="${OSDL_LOANI_INSTALLATIONS}/agar-$AGAR_RECOMMENDED_VERSION"

OSDL_CPPFLAGS="$OSDL_CPPFLAGS -I$AGAR_PREFIX/include/agar"
OSDL_LIBS="$OSDL_LIBS -L$AGAR_PREFIX/lib -lag_gui -lag_core"	

AC_DEFINE([USES_AGAR],[1],[Define to 1 if OSDL is to use Agar])
	

# png (libpng). 

LIBPNG_RECOMMENDED_VERSION="1.2.40"
AC_SUBST(LIBPNG_RECOMMENDED_VERSION)

LIBPNG_OLDEST_SUPPORTED_VERSION="$LIBPNG_RECOMMENDED_VERSION"
AC_SUBST(LIBPNG_OLDEST_SUPPORTED_VERSION)

LIBPNG_PREFIX="${OSDL_LOANI_INSTALLATIONS}/PNG-$LIBPNG_RECOMMENDED_VERSION"

OSDL_CPPFLAGS="$OSDL_CPPFLAGS -I$LIBPNG_PREFIX/include"
OSDL_LIBS="$OSDL_LIBS -L$LIBPNG_PREFIX/lib -lpng"	

AC_DEFINE([USES_LIBPNG],[1],[Define to 1 if OSDL is to use libpng])
	
	
	
# SDL.

SDL_RECOMMENDED_VERSION="1.2.14"
AC_SUBST(SDL_RECOMMENDED_VERSION)

SDL_OLDEST_SUPPORTED_VERSION="$SDL_RECOMMENDED_VERSION"
AC_SUBST(SDL_OLDEST_SUPPORTED_VERSION)

# Checks for the SDL library (see sdl.m4)
AM_PATH_SDL($SDL_OLDEST_SUPPORTED_VERSION,[
	OSDL_CPPFLAGS="$OSDL_CPPFLAGS $SDL_CFLAGS"
	OSDL_LIBS="$OSDL_LIBS $SDL_LIBS"],[
	AC_MSG_ERROR([No usable SDL installation found, minimum requested version was $SDL_OLDEST_SUPPORTED_VERSION.])
	])

AC_DEFINE([USES_SDL],[1],[Define to 1 if OSDL is to use SDL])



# PhysicsFS.

PHYSICSFS_RECOMMENDED_VERSION="2.0.0"
AC_SUBST(PHYSICSFS_RECOMMENDED_VERSION)

PHYSICSFS_OLDEST_SUPPORTED_VERSION="$PHYSICSFS_RECOMMENDED_VERSION"
AC_SUBST(PHYSICSFS_OLDEST_SUPPORTED_VERSION)

PHYSICSFS_PREFIX="${OSDL_LOANI_INSTALLATIONS}/PhysicsFS-$PHYSICSFS_RECOMMENDED_VERSION"

OSDL_CPPFLAGS="$OSDL_CPPFLAGS -I$PHYSICSFS_PREFIX/include"

# Only constraint is to have PhysicsFS before any zlib:
OSDL_LIBS="$OSDL_LIBS -L$PHYSICSFS_PREFIX/lib -lphysfs"	

AC_DEFINE([USES_PHYSICSFS],[1],[Define to 1 if OSDL is to use PhysicsFS])

	
	
# Ceylan section.


CEYLAN_RECOMMENDED_MAJOR="0"
AC_SUBST(CEYLAN_RECOMMENDED_MAJOR)

CEYLAN_RECOMMENDED_MINOR="7"
AC_SUBST(CEYLAN_RECOMMENDED_MINOR)

CEYLAN_RECOMMENDED_RELEASE="0"
AC_SUBST(CEYLAN_RECOMMENDED_RELEASE)


# For the moment, backward compatibility does not go further than the
# current version (when Ceylan will be more mature, will be able to separate
# oldest supported/recommended versions) 
CEYLAN_OLDEST_SUPPORTED_MAJOR="$CEYLAN_RECOMMENDED_MAJOR"
AC_SUBST(CEYLAN_OLDEST_SUPPORTED_MAJOR)

CEYLAN_OLDEST_SUPPORTED_MINOR="$CEYLAN_RECOMMENDED_MINOR"
AC_SUBST(CEYLAN_OLDEST_SUPPORTED_MINOR)

CEYLAN_OLDEST_SUPPORTED_VERSION="$CEYLAN_OLDEST_SUPPORTED_MAJOR.$CEYLAN_OLDEST_SUPPORTED_MINOR"
AC_SUBST(CEYLAN_OLDEST_SUPPORTED_VERSION)

CEYLAN_OLDEST_SUPPORTED_RELEASE="$CEYLAN_RECOMMENDED_RELEASE"
AC_SUBST(CEYLAN_OLDEST_SUPPORTED_RELEASE)


# The Ceylan source archive downloaded by LOANI:
CEYLAN_CURRENT_SOURCE_ARCHIVE="ceylan-$CEYLAN_OLDEST_SUPPORTED_VERSION.tar.bz2"
AC_SUBST(CEYLAN_CURRENT_SOURCE_ARCHIVE)


# Checks for the Ceylan library (see ceylan.m4)
CEYLAN_PATH($CEYLAN_OLDEST_SUPPORTED_MAJOR,$CEYLAN_OLDEST_SUPPORTED_MINOR,$CEYLAN_OLDEST_SUPPORTED_RELEASE)

# CEYLAN_PREFIX is set by CEYLAN_PATH:
CEYLAN_INSTALL_ROOT="$CEYLAN_PREFIX"
AC_SUBST(CEYLAN_INSTALL_ROOT)

CEYLAN_INSTALL_SCRIPT_DIR="$CEYLAN_INSTALL_ROOT/share/Ceylan/scripts"
AC_SUBST(CEYLAN_INSTALL_SCRIPT_DIR)

CEYLAN_INSTALL_SHELL_DIR="$CEYLAN_INSTALL_SCRIPT_DIR/shell"
AC_SUBST(CEYLAN_INSTALL_SHELL_DIR)


OSDL_CPPFLAGS="$OSDL_CPPFLAGS $CEYLAN_CPPFLAGS"
OSDL_LIBS="$OSDL_LIBS $CEYLAN_LIBS"

OSDL_SUBSTITUTE="$CEYLAN_INSTALL_SHELL_DIR/substitute.sh"
AC_SUBST(OSDL_SUBSTITUTE)

OSDL_UPDATE_RST="$CEYLAN_INSTALL_SHELL_DIR/update-docutils.sh"
AC_SUBST(OSDL_UPDATE_RST)



# Zlib.

ZLIB_RECOMMENDED_VERSION="1.2.3"
AC_SUBST(ZLIB_RECOMMENDED_VERSION)

ZLIB_OLDEST_SUPPORTED_VERSION="$ZLIB_RECOMMENDED_VERSION"
AC_SUBST(ZLIB_OLDEST_SUPPORTED_VERSION)

ZLIB_PREFIX="${OSDL_LOANI_INSTALLATIONS}/zlib-$ZLIB_RECOMMENDED_VERSION"

OSDL_CPPFLAGS="$OSDL_CPPFLAGS -I$ZLIB_PREFIX/include"

OSDL_LIBS="$OSDL_LIBS -L$ZLIB_PREFIX/lib -lz"	

AC_DEFINE([USES_ZLIB],[1],[Define to 1 if OSDL is to use Zlib])
	
	


# Build section.


OSDL_TEST_DIR="\${exec_prefix}/tests"
AC_SUBST(OSDL_TEST_DIR)


# First module level (in src/code) section.

OSDL_AUDIO="\$(top_srcdir)/src/code/audio"
AC_SUBST(OSDL_AUDIO)

OSDL_BASIC="\$(top_srcdir)/src/code/basic"
AC_SUBST(OSDL_BASIC)

OSDL_DATA="\$(top_srcdir)/src/code/data"
AC_SUBST(OSDL_DATA)

OSDL_ENGINE="\$(top_srcdir)/src/code/engine"
AC_SUBST(OSDL_ENGINE)

OSDL_EVENTS="\$(top_srcdir)/src/code/events"
AC_SUBST(OSDL_EVENTS)

OSDL_VIDEO="\$(top_srcdir)/src/code/video"
AC_SUBST(OSDL_VIDEO)


# Second module level (in src/code/<a module>) section.

OSDL_AUDIO_RENDERER="$OSDL_AUDIO/audioRenderer"
AC_SUBST(OSDL_AUDIO_RENDERER)

OSDL_VIDEO_RENDERER="$OSDL_VIDEO/videoRenderer"
AC_SUBST(OSDL_VIDEO_RENDERER)

OSDL_VIDEO_TWO_DIMENSIONAL="$OSDL_VIDEO/twoDimensional"
AC_SUBST(OSDL_VIDEO_TWO_DIMENSIONAL)

OSDL_VIDEO_GRAPHICAL_USER_INTERFACE="$OSDL_VIDEO/graphicalUserInterface"
AC_SUBST(OSDL_VIDEO_GRAPHICAL_USER_INTERFACE)



# Compiler-specific optimization flags.


# Debug versus optimizations section.

# See if the user wants aggressive optimizations of the code:
AC_ARG_ENABLE(debug,
	AS_HELP_STRING([--enable-debug],[disable aggressive optimizations [[default=yes]]]),,enable_debug=yes)
if test x$enable_debug = xyes; then

	# Debug requested:
	DEBUG=1
	DEBUG_AUDIO_PLAYBACK=0
	DEBUG_AUDIO_RENDERER=0
	DEBUG_BLIT=0
	DEBUG_BOUNDING_BOX=0
	DEBUG_CACHED_STATES=1
	DEBUG_COLOR=0	
	DEBUG_CONICS=0
	DEBUG_EVENTS=0
	DEBUG_FONT=0
	DEBUG_GUI=1
	DEBUG_IMAGE=0
	DEBUG_NINTENDO_DS=0
	DEBUG_OPENGL=1
	DEBUG_PALETTE=0
	DEBUG_PIXEL=0
	DEBUG_RECTANGLES=0
	DEBUG_RENDERER=0
	DEBUG_RESOURCE_MANAGER=1
	DEBUG_SCHEDULER=0
	DEBUG_SPRITE=0
	DEBUG_SURFACE=0
	DEBUG_VIDEO=0
	DEBUG_VIDEO_RENDERER=1
	DEBUG_WIDGET=0
	
	VERBOSE_AUDIO_MODULE=0
	VERBOSE_BASIC_MODULE=0
	VERBOSE_DATA_MODULE=0
	VERBOSE_ENGINE_MODULE=1
	VERBOSE_EVENTS_MODULE=1
	VERBOSE_VIDEO_MODULE=1
	
	VERBOSE_CONTROLLER=0
	VERBOSE_JOYSTICK=0
	VERBOSE_JOYSTICK_HANDLER=0
	VERBOSE_KEYBOARD_HANDLER=0
	VERBOSE_MOUSE=0
	VERBOSE_MOUSE_HANDLER=0
	
	COUNT_INSTANCES=0
	CHECK_OPENGL_CALLS=1
	CACHE_OVERALL_SETTINGS=0
		
	AM_CXXFLAGS="$AM_CXXFLAGS -g" 
    if test x$ac_cv_cxx_compiler_gnu = xyes; then
		# Add -pg to manage profile information for gprof.
		# -fstack-check used to be specified but wroke havoc in generated code,
		# causing crashes and various valgrind reports.
		#AM_CXXFLAGS="$AM_CXXFLAGS -ggdb -O0 -fno-inline -fbounds-check -ftrapv -fnon-call-exceptions"
		# Safest settings:
		AM_CXXFLAGS="$AM_CXXFLAGS -ggdb -O0 -fno-inline"				
	fi	 
else

	# Aggressive optimizations:
	DEBUG=0
	DEBUG_AUDIO_PLAYBACK=0
	DEBUG_AUDIO_RENDERER=0
	DEBUG_BLIT=0
	DEBUG_BOUNDING_BOX=0
	DEBUG_CACHED_STATES=0	
	DEBUG_COLOR=0	
	DEBUG_CONICS=0
	DEBUG_EVENTS=0
	DEBUG_FONT=0
	DEBUG_GUI=0
	DEBUG_IMAGE=0
	DEBUG_NINTENDO_DS=0
	DEBUG_OPENGL=0
	DEBUG_PALETTE=0
	DEBUG_PIXEL=0
	DEBUG_RECTANGLES=0
	DEBUG_RENDERER=0
	DEBUG_RESOURCE_MANAGER=0
	DEBUG_SCHEDULER=0
	DEBUG_SPRITE=0
	DEBUG_SURFACE=0
	DEBUG_VIDEO=0
	DEBUG_VIDEO_RENDERER=0
	DEBUG_WIDGET=0

	VERBOSE_AUDIO_MODULE=0
	VERBOSE_BASIC_MODULE=0
	VERBOSE_DATA_MODULE=0
	VERBOSE_ENGINE_MODULE=0
	VERBOSE_EVENTS_MODULE=0
	VERBOSE_VIDEO_MODULE=0
	
	VERBOSE_CONTROLLER=0
	VERBOSE_JOYSTICK=0
	VERBOSE_JOYSTICK_HANDLER=0
	VERBOSE_KEYBOARD_HANDLER=0
	VERBOSE_MOUSE=0
	VERBOSE_MOUSE_HANDLER=0
	
	COUNT_INSTANCES=0
	CHECK_OPENGL_CALLS=0
	CACHE_OVERALL_SETTINGS=1
	
    if test x$ac_cv_cxx_compiler_gnu = xyes; then
		# -fomit-frame-pointer: may prevent debugging on some platforms
		# -ffast-math: not requesting exact IEEE or ISO implementation
		# rules/specifications
        AM_CXXFLAGS="$AM_CXXFLAGS -g0 -O3 -fexpensive-optimizations -fomit-frame-pointer -ffast-math -funroll-loops"
    fi
	
	AM_LDFLAGS="$AM_LDFLAGS --strip-all"
	
    case "$target" in
        i486-*-*)
            if test x$ac_cv_cxx_compiler_gnu = xyes; then
                AM_CXXFLAGS="$AM_CXXFLAGS -march=i486"
            fi
            ;;
        i?86-*-*)
            if test x$ac_cv_cxx_compiler_gnu = xyes; then
                AM_CXXFLAGS="$AM_CXXFLAGS -march=pentium -mcpu=pentiumpro"
            fi
            ;;
        *-*-osf*)
            if test x$ac_cv_cxx_compiler_gnu != xyes; then
                AM_CXXFLAGS="$AM_CXXFLAGS -g3 -fast -arch host"
            fi
            ;;
    esac
fi



AC_DEFINE_UNQUOTED([DEBUG],
	[$DEBUG],
	[Define to 1 if generic debug mode is to be enabled])


AC_DEFINE_UNQUOTED([DEBUG_AUDIO_PLAYBACK],
	[$DEBUG_AUDIO_PLAYBACK],
	[Define to 1 if debug mode for sound/music playback is to be enabled])


AC_DEFINE_UNQUOTED([DEBUG_AUDIO_RENDERER],
	[$DEBUG_AUDIO_RENDERER],
	[Define to 1 if debug mode for audio renderer is to be enabled])


AC_DEFINE_UNQUOTED([DEBUG_BLIT],
	[$DEBUG_BLIT],
	[Define to 1 if debug mode for blit operations is to be enabled])


AC_DEFINE_UNQUOTED([DEBUG_BOUNDING_BOX],
	[$DEBUG_BOUNDING_BOX],
	[Define to 1 if debug mode for bounding boxes is to be enabled])


AC_DEFINE_UNQUOTED([DEBUG_CACHED_STATES],
	[$DEBUG_CACHED_STATES],
	[Define to 1 if debug mode for cached states is to be enabled])


AC_DEFINE_UNQUOTED([DEBUG_COLOR],
	[$DEBUG_COLOR],
	[Define to 1 if debug mode for colors is to be enabled])


AC_DEFINE_UNQUOTED([DEBUG_CONICS],
	[$DEBUG_CONICS],
	[Define to 1 if debug mode for conics is to be enabled])


AC_DEFINE_UNQUOTED([DEBUG_EVENTS],
	[$DEBUG_EVENTS],
	[Define to 1 if debug mode for events is to be enabled])


AC_DEFINE_UNQUOTED([DEBUG_FONT],
	[$DEBUG_FONT],
	[Define to 1 if debug mode for font management is to be enabled])


AC_DEFINE_UNQUOTED([DEBUG_GUI],
	[$DEBUG_GUI],
	[Define to 1 if debug mode for the graphical user interface is to be enabled])


AC_DEFINE_UNQUOTED([DEBUG_IMAGE],
	[$DEBUG_IMAGE],
	[Define to 1 if debug mode for image management is to be enabled])


AC_DEFINE_UNQUOTED([DEBUG_NINTENDO_DS],
	[$DEBUG_NINTENDO_DS],
	[Define to 1 if debug mode for Nintendo DS is to be enabled])


AC_DEFINE_UNQUOTED([DEBUG_PALETTE],
	[$DEBUG_PALETTE],
	[Define to 1 if debug mode for palette operations is to be enabled])


AC_DEFINE_UNQUOTED([DEBUG_PIXEL],
	[$DEBUG_PIXEL],
	[Define to 1 if debug mode for pixel-level operations is to be enabled])


AC_DEFINE_UNQUOTED([DEBUG_RECTANGLES],
	[$DEBUG_RECTANGLES],
	[Define to 1 if debug mode for rectangle management is to be enabled])


AC_DEFINE_UNQUOTED([DEBUG_RENDERER],
	[$DEBUG_RENDERER],
	[Define to 1 if debug mode for general renderer is to be enabled])


AC_DEFINE_UNQUOTED([DEBUG_RESOURCE_MANAGER],
	[$DEBUG_RESOURCE_MANAGER],
	[Define to 1 if debug mode for resource manager is to be enabled])


AC_DEFINE_UNQUOTED([DEBUG_SCHEDULER],
	[$DEBUG_SCHEDULER],
	[Define to 1 if debug mode for scheduler is to be enabled])


AC_DEFINE_UNQUOTED([DEBUG_SPRITE],
	[$DEBUG_SPRITE],
	[Define to 1 if debug mode for sprites is to be enabled])


AC_DEFINE_UNQUOTED([DEBUG_SURFACE],
	[$DEBUG_SURFACE],
	[Define to 1 if debug mode for surfaces is to be enabled])
	
	
AC_DEFINE_UNQUOTED([DEBUG_VIDEO],
	[$DEBUG_VIDEO],
	[Define to 1 if debug mode for general video is to be enabled])
	
	
AC_DEFINE_UNQUOTED([DEBUG_VIDEO_RENDERER],
	[$DEBUG_VIDEO_RENDERER],
	[Define to 1 if debug mode for video renderer is to be enabled])
	
	
AC_DEFINE_UNQUOTED([DEBUG_WIDGET],
	[$DEBUG_WIDGET],
	[Define to 1 if debug mode for widgets is to be enabled])

	
AC_DEFINE_UNQUOTED([VERBOSE_AUDIO_MODULE],
	[$VERBOSE_AUDIO_MODULE],
	[Define to 1 if verbose mode for audio module is to be enabled])
	
	
AC_DEFINE_UNQUOTED([VERBOSE_BASIC_MODULE],
	[$VERBOSE_BASIC_MODULE],
	[Define to 1 if verbose mode for basic module is to be enabled])
	
	
AC_DEFINE_UNQUOTED([VERBOSE_DATA_MODULE],
	[$VERBOSE_DATA_MODULE],
	[Define to 1 if verbose mode for data module is to be enabled])
	
	
AC_DEFINE_UNQUOTED([VERBOSE_ENGINE_MODULE],
	[$VERBOSE_ENGINE_MODULE],
	[Define to 1 if verbose mode for engine module is to be enabled])
	
AC_DEFINE_UNQUOTED([VERBOSE_EVENTS_MODULE],
	[$VERBOSE_EVENTS_MODULE],
	[Define to 1 if verbose mode for events module is to be enabled])
	
AC_DEFINE_UNQUOTED([VERBOSE_VIDEO_MODULE],
	[$VERBOSE_VIDEO_MODULE],
	[Define to 1 if verbose mode for video module is to be enabled])
	
	
AC_DEFINE_UNQUOTED([VERBOSE_CONTROLLER],
	[$VERBOSE_CONTROLLER],
	[Define to 1 if verbose mode for controller is to be enabled])
	
	
AC_DEFINE_UNQUOTED([VERBOSE_JOYSTICK],
	[$VERBOSE_JOYSTICK],
	[Define to 1 if verbose mode for joystick is to be enabled])


AC_DEFINE_UNQUOTED([VERBOSE_JOYSTICK_HANDLER],
	[$VERBOSE_JOYSTICK_HANDLER],
	[Define to 1 if verbose mode for joystick handler is to be enabled])
	
	
AC_DEFINE_UNQUOTED([VERBOSE_KEYBOARD_HANDLER],
	[$VERBOSE_KEYBOARD_HANDLER],
	[Define to 1 if verbose mode for keyboard handler is to be enabled])
	
	
AC_DEFINE_UNQUOTED([VERBOSE_MOUSE],
	[$VERBOSE_MOUSE],
	[Define to 1 if verbose mode for mouse is to be enabled])


AC_DEFINE_UNQUOTED([VERBOSE_MOUSE_HANDLER],
	[$VERBOSE_MOUSE_HANDLER],
	[Define to 1 if verbose mode for mouse handler is to be enabled])
	
	
	
AC_DEFINE_UNQUOTED([COUNT_INSTANCES],
	[$COUNT_INSTANCES],
	[Define to 1 if instance counting mode is to be enabled])


AC_DEFINE_UNQUOTED([CHECK_OPENGL_CALLS],
	[$CHECK_OPENGL_CALLS],
	[Define to 1 if OpenGL calls should be checked for errors])


AC_DEFINE_UNQUOTED([CACHE_OVERALL_SETTINGS],
	[$CACHE_OVERALL_SETTINGS],
	[Define to 1 if overall settings should be cached instead of being retrieved on the fly])





# Warning and error section.

# Add verbose warnings by default, and allow ANSI compliance checking:
AC_ARG_ENABLE(strict-ansi,
	AS_HELP_STRING([--enable-strict-ansi],[enable strict ANSI compliance build [[default=yes]]]),,enable_strict_ansi=yes)
if test x$ac_cv_cxx_compiler_gnu = xyes; then
	# Basically paranoïd in all cases:
	
	# Following warnings are not used, explanations follow: 
	#    -Weffc++: the standard library headers trigger zillions of warnings.
	#    -Waggregate-return: even a simple std::string is an aggregate.
	#    -Wunused-parameter: inherited methods may not use some of their
	# parameters, not wanting to freeze API with "__attribute__" keyword.
	#    -Wpadded: add it if wanting to reorder fields of structures to save
	# some bytes.
	#    -Wmissing-noreturn: would force declaring __attribute__ ((noreturn))
	# in every method which throws exceptions about unimplemented feature
	#	 -Wold-style-cast: some standard macros (WIFEXITED, WEXITSTATUS, 
	# etc.) expand into old-style C casts
	#    -Wunreachable-code: temporarily removed because of gcc 4.0.2
	# incorrecly complaining: 'warning: will never be executed' in Exception
	# constructor
	#    -Wpacked: some structures may be declared packed with no effect, we
	# usually do not care if it is the case
    #    -pedantic-errors: removed to allow Agar's variadic macros
    #    -Wredundant-decls: removed to allow Agar's multiple declarations in
    # same scope
	#    -Wconversion: (temporarily?) removed because of gcc 4.3 complaining
	# with 'conversion to Ceylan::Uint8 from int may alter its value',
	# when 'a += b ;' with a and b being both Ceylan::Uint8.
	#    -Wfloat-equal: (temporarily?) removed because of Agar 1.3.3 having
	# float comparisons in headers (ex: in agar/gui/widget.h)
    AM_CXXFLAGS="$AM_CXXFLAGS -Wall -Werror -Woverloaded-virtual -W -Wundef -Wendif-labels -Wshadow -Wpointer-arith -Wcast-qual -Wcast-align -Wwrite-strings -Wsign-compare -Wmissing-format-attribute -Wno-unused-parameter -Wno-unknown-pragmas -Wno-long-long"
    if test x$enable_strict_ansi = xyes; then
		# Do not know what "-D_XOPEN_SOURCE" would change.
        AM_CXXFLAGS="$AM_CXXFLAGS -ansi"
    fi
fi



# Colors for build output section.

# Some color definitions, to be more readable.

# In the case your terminal does not support color, use:
# --disable-colored-build

# See also: function updateColorSupport of
# Ceylan/trunk/src/code/scripts/shell/termUtils.sh 

# Text color codes:

black_text=30
red_text=31
green_text=32
yellow_text=33
blue_text=34
magenta_text=35
cyan_text=36
white_text=37


# Background color codes:

black_back=40
red_back=41
green_back=42
yellow_back=43
blue_back=44
magenta_back=45
cyan_back=46
white_back=47


# Text attributes:

none_att=00
bold_att=01
underscore_att=04
blink_att=05
reverse_att=07
concealed_att=08

default_att=$none_att


# Pre defined text styles:

# Uses terminal features such as fancy make colors by default:
AC_ARG_ENABLE(colored-build,
	AS_HELP_STRING([--enable-colored-build],[enable colored build [[default=yes]]]),,enable_colored_build=yes)
if test x$enable_colored_build = xyes; then

	# The quadrigram '@<:@' is needed to allow for an unbalanced '[':
	
	OSDL_DEFAULT_STYLE="@<:@${default_att};${white_text};${black_back}m"
	OSDL_TITLE_STYLE="@<:@${default_att};${magenta_text};${black_back}m"
	OSDL_ITEM_STYLE="@<:@${default_att};${cyan_text};${black_back}m"
	OSDL_COMMAND_STYLE="@<:@${default_att};${cyan_text};${black_back}m"
	OSDL_MAKE_STYLE="@<:@${default_att};${green_text};${black_back}m"
	OSDL_COMPILE_STYLE="@<:@${default_att};${cyan_text};${black_back}m"
	OSDL_LINK_STYLE="@<:@${default_att};${magenta_text};${black_back}m"
	OSDL_INSTALL_STYLE="@<:@${default_att};${blue_text};${black_back}m"
	OSDL_CLEAN_STYLE="@<:@${default_att};${yellow_text};${black_back}m"
	OSDL_ERROR_STYLE="@<:@${default_att};${white_text};${red_back}m"
	OSDL_WARNING_STYLE="@<:@${default_att};${yellow_text};${black_back}m"

else

	OSDL_DEFAULT_STYLE=""
	OSDL_TITLE_STYLE=""
	OSDL_ITEM_STYLE=""
	OSDL_COMMAND_STYLE=""
	OSDL_MAKE_STYLE=""
	OSDL_COMPILE_STYLE=""
	OSDL_LINK_STYLE=""
	OSDL_INSTALL_STYLE=""
	OSDL_CLEAN_STYLE=""
	OSDL_ERROR_STYLE=""
	OSDL_WARNING_STYLE=""

fi

AC_SUBST(OSDL_DEFAULT_STYLE)
AC_SUBST(OSDL_TITLE_STYLE)
AC_SUBST(OSDL_ITEM_STYLE)
AC_SUBST(OSDL_COMMAND_STYLE)
AC_SUBST(OSDL_MAKE_STYLE)
AC_SUBST(OSDL_COMPILE_STYLE)
AC_SUBST(OSDL_LINK_STYLE)
AC_SUBST(OSDL_INSTALL_STYLE)
AC_SUBST(OSDL_CLEAN_STYLE)
AC_SUBST(OSDL_ERROR_STYLE)
AC_SUBST(OSDL_WARNING_STYLE)



# Detects underlying platform and configures build accordingly.
#
# Still needing platform detection for some specificities:
#   - need to define OSDL_DLL for the Windows platform, for
# Visual C++-based builds
#	- set various system-dependent paths
#
# Note: platform detection by Ceylan should be preferred to tests here.
#
CheckPlatform()
{
	
	# This symbol ought to be specifically defined only so that Windows
	# builds declare correctly import/export defines:
	OSDL_DLL=""
	
	# Needed when building a library on Windows platforms:
	OSDL_DLL_EXPORT_WINDOWS="__declspec( dllexport )"

	OSDL_ARCH_NINTENDO_DS=0

	# Needed with gcc compilers:
	OSDL_PACKED_ATTRIBUTE="\"__attribute__ ((packed))\""
	
    # Base on host rather than on target:
	case "$host" in
	
		*-*-win32*) 
        	HOST_ARCH=win32
			OSDL_DLL="${OSDL_DLL_EXPORT_WINDOWS}"
			OSDL_PACKED_ATTRIBUTE=""
			;;

		*-*-cygwin*)
        	HOST_ARCH=win32
			CFLAGS="$CFLAGS -I/usr/include/mingw -DWIN32 -Uunix -mno-cygwin"
			LIBS="$LIBS -mno-cygwin"
			OSDL_DLL="${OSDL_DLL_EXPORT_WINDOWS}"
			;;
		
		*-*-mingw32*)
        	HOST_ARCH=win32
	        LIBS="-lmingw32 $LIBS -mwindows"
			OSDL_DLL="${OSDL_DLL_EXPORT_WINDOWS}"
			;;
				
	    *-*-linux*|*-*-uclinux*) 
        	HOST_ARCH=linux
			;;
		
        *-*-bsdi*)
        	HOST_ARCH=bsdi
            ;;
			
		*-*-freebsd*|*-*-dragonfly*)
        	HOST_ARCH=freebsd
			;;
			
		*-*-netbsd*) 
        	HOST_ARCH=netbsd
			;;

		*-*-openbsd*) 
        	HOST_ARCH=openbsd
			;;
		
        *-*-beos*)
        	HOST_ARCH=beos
			;;
        
        *-*-darwin* )
        	HOST_ARCH=macosx
			;;
		
        *-*-sysv5*)
        	HOST_ARCH=sysv5
            ;;
		
		*-*-solaris*)	
        	HOST_ARCH=solaris
			;;
            
		*-*-hpux*)
        	HOST_ARCH=hpux
			;;
            
		*-*-irix*)          
        	HOST_ARCH=irix
			;;
            
		*-*-aix*)
        	HOST_ARCH=aix
			;;
            
		*-*-osf*)
        	HOST_ARCH=osf
			;;

	    *)
	        # Not identified
            HOST_ARCH=unknown
	        ;;
		
	esac


	AC_DEFINE_UNQUOTED([ARCH_NINTENDO_DS],
		[$OSDL_ARCH_NINTENDO_DS],
		[Define to 1 if the target platform is the Nintendo DS])


	# For all builds, OSDL_DLL will be actually defined
	# thanks to command-line preprocessor options (-DOSDL_DLL="...")
	# so that headers can avoid #including platform-specific configuration
	# files. Hence no 'AC_DEFINE_UNQUOTED([OSDL_DLL], ...' here.
	# Same reason applies for OSDL_PACKED_ATTRIBUTE. 
	
	AM_CXXFLAGS="${AM_CXXFLAGS} -DOSDL_DLL=${OSDL_DLL} -DOSDL_PACKED_ATTRIBUTE=${OSDL_PACKED_ATTRIBUTE}"
	
}


# Checks if we want to use RPATH when linking to OSDL.
# Note: CheckPlatform must have been executed first, for HOST_ARCH.
CheckRpath()
{
  
  AC_ARG_ENABLE([rpath],
    AS_HELP_STRING([--enable-rpath],[use an rpath when linking to OSDL [[default=yes]]]),
      [case "${enableval}" in
        yes) use_rpath=yes ;;
        no)  use_rpath=no ;;
	    *) AC_MSG_ERROR(bad value ${enableval} for --enable-rpath) ;;
      esac],[use_rpath=yes])

  if test "x$enable_rpath" = "xyes"; then

    if test $HOST_ARCH = bsdi -o $HOST_ARCH = freebsd -o $HOST_ARCH = irix -o $HOST_ARCH = linux -o $HOST_ARCH = netbsd; then
      OSDL_RPATH_LD_FLAGS="-Wl,-rpath,\${libdir}"
    fi

    if test $HOST_ARCH = solaris; then
      OSDL_RPATH_LD_FLAGS="-R\${libdir}"
    fi
    
  else
  
    OSDL_RPATH_LD_FLAGS=""
    
  fi  

}


# Detects OpenGL capabilities and setup build accordingly.
#
CheckOpenGL()
{

  # Is OpenGL to be used?
  OSDL_USES_OPENGL=0
  AC_ARG_ENABLE([opengl],
    AS_HELP_STRING([--enable-opengl],[use OpenGL and GLU in OSDL internals [[default=yes]]]),
      [case "${enableval}" in
        yes) opengl=yes ;;
        no)  opengl=no ;;
	    *) AC_MSG_ERROR(bad value ${enableval} for --enable-opengl) ;;
      esac],[opengl=yes])
    # If wanted, is OpenGL available?	
	AC_MSG_CHECKING([whether OpenGL and GLU are wanted])
	if test x$opengl = xyes; then
        AC_MSG_RESULT([yes])
        have_opengl=yes
        # Defined in opengl.m4:
        AX_CHECK_GL
		if test x$no_gl = xyes; then 
			AC_MSG_WARN([OpenGL use requested but not available, disabling it])
			have_opengl=no
		else
			# OpenGL is ok, GLU too?	
        	AX_CHECK_GLU
			if test x$no_glu = xyes; then 
				AC_MSG_WARN([GLU use requested but not available, OpenGL use disabled])
				have_opengl=no
			else
				CFLAGS="$CFLAGS $GLU_CFLAGS $GL_CFLAGS"
				LIBS="$LIBS $GLU_LIBS $GL_LIBS"
			fi	
		fi
		AC_MSG_CHECKING([whether OpenGL and GLU are enabled])
		AC_MSG_RESULT([$have_opengl])
	else
		# OpenGL not wanted here:
		AC_MSG_RESULT([no])	
	fi
	
	if test x$have_opengl = xyes; then
      OSDL_USES_OPENGL=1
    fi	
	
	AC_DEFINE_UNQUOTED([USES_OPENGL],
		[$OSDL_USES_OPENGL],
		[Define to 1 if OSDL is to use OpenGL and GLU])

}




CheckPlatform
CheckRpath
CheckOpenGL

# Section of non feature-based checkings.


# Maybe later: use CXXCOMPILE/CXXLINK to customize build output.


AC_SUBST(SYSTEM_LIBS)

# Directories conditionnally selected by the configure step:
AC_SUBST(OSDL_EXTRA_DIRS)

# Libraries conditionnally selected by the configure step:
AC_SUBST(OSDL_EXTRA_LIBS)

AC_MSG_NOTICE([OSDL_CPPFLAGS = $OSDL_CPPFLAGS])
AC_MSG_NOTICE([OSDL_LIBS = $OSDL_LIBS]) 

CPPFLAGS="$CPPFLAGS $OSDL_CPPFLAGS"
AC_SUBST(CPPFLAGS)

LIBS="$LIBS $OSDL_LIBS"
AC_SUBST(LIBS)

AC_SUBST(OSDL_RPATH_LD_FLAGS)


AC_SUBST(AM_CXXFLAGS)
AC_SUBST(AM_LDFLAGS)

# Updates the config file generated by AX_PREFIX_CONFIG_H:
AC_CONFIG_COMMANDS([configprefix],[cat src/code/OSDLConfig.h | sed 's|OSDL_HAVE_|OSDL_USES_|g' > .OSDLConfig.h; echo "/* Note: NEVER commit (check-in) this generated file! */" >> .OSDLConfig.h; /bin/mv -f .OSDLConfig.h src/code/OSDLConfig.h; /bin/rm -f _configs.sed])


AC_CONFIG_FILES([
	Makefile
	src/code/audio/audioRenderer/Makefile
	src/code/audio/Makefile
	src/code/basic/Makefile
	src/code/basic/OSDLDocMainPage.h
	src/code/basic/OSDLHeaderVersion.h
	src/code/data/Makefile
	src/code/engine/Makefile
	src/code/events/Makefile
	src/code/Makefile
	src/code/scripts/Makefile
	src/code/scripts/shell/Makefile
	src/code/scripts/python/Makefile
	src/code/video/Makefile
	src/code/video/graphicalUserInterface/Makefile
	src/code/video/twoDimensional/Makefile
	src/code/video/videoRenderer/Makefile
	src/conf/build/loani/LOANI-README-template.txt
	src/conf/build/loani/Makefile
	src/conf/build/m4/Makefile
	src/conf/build/m4/osdl.m4
	src/conf/build/Makefile
	src/conf/build/osdl-ST_VERSION.pc
	src/conf/build/OSDLToolsSettings.inc
	src/conf/doc/doxygen.conf
	src/conf/doc/Makefile
	src/conf/Makefile
	src/doc/basic/Makefile
	src/doc/basic/OSDL-AUTHORS-template.txt
	src/doc/basic/OSDL-COPYING.LIB-template.txt
	src/doc/basic/OSDL-FAQ-template.txt
	src/doc/basic/OSDL-INSTALL-template.txt
	src/doc/basic/OSDL-MAINTENERS-template.txt
	src/doc/basic/OSDL-NEWS-template.txt
	src/doc/basic/OSDL-README-template.txt
	src/doc/basic/OSDL-THANKS-template.txt
	src/doc/basic/OSDL-TODO-template.txt
	src/doc/Makefile
	src/Makefile
])


AC_OUTPUT

echo \
"------------------------------------------------------------------------
Configuration:

  Source code location:   ${srcdir}
  C++ compiler:           ${CXX}
  C++ compiler flags:     ${AM_CXXFLAGS}
  Host System Type:       ${host}
  Install path (prefix):  ${OSDL_INSTALL_SHARED_DIR}

  See trunk/src/code/OSDLConfig.h for further configuration information.
------------------------------------------------------------------------"

